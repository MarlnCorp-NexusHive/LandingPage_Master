// Universal Arabic Language System Fix
// This script ensures Arabic language works on ALL hosting platforms

(function() {
    'use strict';
    
    const DEFAULT_LANG = 'en';
    const SUPPORTED_RTL = new Set(['ar']);
    const CACHE = {};
    
    console.log('๐ Universal Arabic Language System: Initializing...');
    
    // Enhanced error handling for all hosting environments
    function logError(message, error) {
        console.warn('๐ Language System:', message, error);
    }
    
    // Comprehensive embedded translations for ALL pages
    const EMBEDDED = {
        ar: {
            // Header Navigation
            header: { 
                about: "ูู ูุญู", 
                services: "ุงูุฎุฏูุงุช", 
                company: "ุงูุดุฑูุฉ" 
            },
            
            // Dropdown Menus
            dropdown: {
                services: {
                    aiConsulting: "ุงูุงุณุชุดุงุฑุงุช ุงููุฏุนููุฉ ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู",
                    engineering: "ุฎุฏูุงุช ุงูููุฏุณุฉ",
                    dataAnalytics: "ุชุญููู ุงูุจูุงูุงุช",
                    corporateTraining: "ุงูุชุฏุฑูุจ ุงููุคุณุณู"
                },
                company: {
                    profile: "ุงูููู ุงูุชุนุฑููู ูุดุฑูุฉ Marln",
                    csr: "ุงููุณุคูููุฉ ุงูุงุฌุชูุงุนูุฉ ููุดุฑูุงุช (CSR)",
                    partners: "ุงูุดุฑูุงุก ุงูุชููููู",
                    industry: "ุงูุตูุงุนุฉ"
                }
            },
            
            // Common Elements
            common: {
                contactUs: "ุชูุงุตู ูุนูุง",
                scheduleMeeting: "ุงุญุฌุฒ ุงุฌุชูุงุนุงู",
                speakToTeam: "ุชุญุฏุซ ุฅูู ูุฑูููุง",
                sendMessage: "ุฃุฑุณู ุงูุฑุณุงูุฉ",
                namePlaceholder: "ุงูุงุณู*",
                emailPlaceholder: "ุงูุจุฑูุฏ ุงูุฅููุชุฑููู*",
                messagePlaceholder: "ุฃุฎุจุฑูุง ุนู ูุดุฑูุนู",
                ourProducts: "ููุชุฌุงุชูุง ุงูุฐููุฉ",
                yourName: "ุงุณูู",
                yourEmail: "ุจุฑูุฏู ุงูุฅููุชุฑููู",
                companyName: "ุงุณู ุงูุดุฑูุฉ",
                tellUsAboutProject: "ุฃุฎุจุฑูุง ุนู ูุดุฑูุนู"
            },
            
            // Industry Page Specific
            industry: {
                title: "ุญููู ุงูุตูุงุนุฉ",
                automotive: {
                    title: "ุงูุณูุงุฑุงุช",
                    desc: "ุชุชุทูุฑ ุตูุงุนุฉ ุงูุณูุงุฑุงุช ุจุงุณุชูุฑุงุฑ ูุน ุธููุฑ ุชูููุงุช ุฌุฏูุฏุฉ ูุซู ุงููุฑูุจุงุช ุงููุณุชููุฉ ูุงููุฑูุจุงุช ุงูููุฑุจุงุฆูุฉ ูุฃูุธูุฉ ุงููุณุงุนุฏุฉ ุงููุชูุฏูุฉ ููุณุงุฆู (ADAS)."
                },
                banking: {
                    title: "ุงูุฎุฏูุงุช ุงููุตุฑููุฉ",
                    desc: "ุญููู ุงูุชูุธูู ุงูุชููู ุงููุตุฑูู ูููู ุญุงุณู ูู ุงูุตูุงุนุฉ ุงููุตุฑููุฉ. ุชุญุชุงุฌ ุงูุจููู ุฅูู ุงูุฃุดุฎุงุต ุงูููุงุณุจูู ูุชุทููุฑ ูุชูููุฐ ูุตูุงูุฉ ุฃูุธูุชูุง ุงูุชูููุฉ."
                },
                consumerGoods: {
                    title: "ุงูุณูุน ูุงูุฎุฏูุงุช ุงูุงุณุชููุงููุฉ",
                    desc: "ูููู ูุดุฑูุฉ Marln Corp ูุณุงุนุฏุฉ ุดุฑูุงุช CGS ูู ุงูุนุซูุฑ ุนูู ูุญุชุฑููู ูุคูููู ุจูุฐู ุงูููุงุฑุงุช ุงููุทููุจุฉ. ูููู ูููุงูุงุช ุงูุชูุธูู ุฃูุถุงู ุชูููุฑ ุฎูุงุฑุงุช ุงูุชูุธูู ุงููุคูุช ูุงูุนููุฏ."
                },
                communications: {
                    title: "ุงูุงุชุตุงูุงุช ูุงูุฅุนูุงู",
                    desc: "ุฅูุชุงุฌ ูุชุญุฑูุฑ ุงูููุฏูู: ูุน ุชุฒุงูุฏ ุงูุทูุจ ุนูู ูุญุชูู ุงูููุฏูู ุนุจุฑ ููุตุงุช ูุฎุชููุฉุ ุฃุตุจุญุช ููุงุฑุงุช ุฅูุชุงุฌ ูุชุญุฑูุฑ ุงูููุฏูู ุฐุงุช ูููุฉ ูุชุฒุงูุฏุฉ."
                },
                healthcare: {
                    title: "ุงูุฑุนุงูุฉ ุงูุตุญูุฉ",
                    desc: "ุงูุณุฌูุงุช ุงูุตุญูุฉ ุงูุฅููุชุฑูููุฉ (EHR) ูุชูููููุฌูุง ุงููุนูููุงุช ุงูุตุญูุฉ (HIT): ุงูููุงุกุฉ ูู ุฃูุธูุฉ EHR ูุฃุฏูุงุช HIT ุถุฑูุฑูุฉ ูุฅุฏุงุฑุฉ ุณุฌูุงุช ุงููุฑุถู ูุถูุงู ุงูุงูุชุซุงู."
                },
                hiTech: {
                    title: "ุงูุชูููุฉ ุงูุนุงููุฉ",
                    desc: "ุชุนุชูุฏ ุดุฑูุงุช ุงูุชูููุฉ ุงูุนุงููุฉ ุจุดูู ูุจูุฑ ุนูู ุงููุญุชุฑููู ุงูููุฑุฉ ุฐูู ุงูุฎุจุฑุฉ ูู ูุฌุงูุงุช ุชูููุฉ ูุฎุชููุฉ ูุชุทููุฑ ูุชูููุฐ ูุตูุงูุฉ ุงูููุชุฌุงุช ูุงูุฎุฏูุงุช ุงููุจุชูุฑุฉ."
                },
                lifeSciences: {
                    title: "ุนููู ุงูุญูุงุฉ",
                    desc: "ุชุนุชูุฏ ุดุฑูุงุช ุนููู ุงูุญูุงุฉ ุนูู ูุฌููุนุฉ ูุชููุนุฉ ูู ุงููุญุชุฑููู ุงูููุฑุฉ ุฐูู ุงูุฎุจุฑุฉ ูู ูุฌุงูุงุช ุชูููุฉ ูุฎุชููุฉ ูุฅุญุฑุงุฒ ุชูุฏู ูู ุงูุทุจ ูุงูุชูููููุฌูุง ุงูุญูููุฉ."
                },
                publicService: {
                    title: "ุงูุฎุฏูุฉ ุงูุนุงูุฉ",
                    desc: "ุงููุทุงุน ุงูุนุงู ูุนุชูุฏ ุจุดูู ูุชุฒุงูุฏ ุนูู ุงูุชูููููุฌูุง ูุชุญููู ุฃูุฏุงููุ ููุฐุง ุงูุทูุจ ุนูู ุงูููุงุฑุงุช ุงูุชูููุฉ ุณูููู ููุท ูู ุงูุณููุงุช ุงููุงุฏูุฉ."
                },
                retail: {
                    title: "ุงูุชุฌุฒุฆุฉ",
                    desc: "ุชุนุชูุฏ ุดุฑูุงุช ุงูุชุฌุฒุฆุฉ ูู ุฌููุน ุงูุฃุญุฌุงู ุนูู ูุฌููุนุฉ ูุชููุนุฉ ูู ุงูููุงุฑุงุช ุงูุชูููุฉ: ุฃูุธูุฉ ููุงุท ุงูุจูุน (POS) ูุฅุฏุงุฑุฉ ุงููุฎุฒูู ูุฅุฏุงุฑุฉ ุณูุณูุฉ ุงูุชูุฑูุฏ."
                },
                travel: {
                    title: "ุงูุณูุฑ ูุงูุณูุงุญุฉ",
                    desc: "ุชุชุทูุฑ ุตูุงุนุฉ ุงูุณูุฑ ุจุงุณุชูุฑุงุฑ ูุน ุธููุฑ ุชูููุงุช ุฌุฏูุฏุฉ ูุซู ุงูุฐูุงุก ุงูุงุตุทูุงุนู (AI) ูุงูุชุนูู ุงูุขูู (ML) ูุชุญููู ุงูุจูุงูุงุช."
                },
                government: {
                    title: "ุงูุญูููุฉ",
                    desc: "ูุณุงุนุฏ ุงูููุงูุงุช ุงูุญููููุฉ ุนูู ุงูุงูุชูุงู ุฅูู ุงูุณุญุงุจุฉ ูุชูููู ูุฑููุฉ ููุงุจููุฉ ุชูุณุน ุฃูุจุฑ. ูููู ููุฑูููุง ูุณุงุนุฏุชู ูู ุงุฎุชูุงุฑ ุฃูุถู ุญู ุณุญุงุจู ูุงุญุชูุงุฌุงุชู."
                },
                utilities: {
                    title: "ุงููุฑุงูู",
                    desc: "ูุณุงุนุฏ ุดุฑูุงุช ุงููุฑุงูู ุนูู ุงูุงูุชูุงู ุฅูู ุงูุณุญุงุจุฉ ูุชูููู ูุฑููุฉ ููุงุจููุฉ ุชูุณุน ุฃูุจุฑ. ูููู ููุฑูููุง ูุณุงุนุฏุชู ูู ุงุฎุชูุงุฑ ุฃูุถู ุญู ุณุญุงุจู ูุนููู."
                },
                exploreSolutions: "ุงุณุชูุดู ุงูุญููู"
            },
            
            // Contact Section
            contact: {
                form: { title: "ุงุจุฏุฃ ูุดุฑูุนู ุงูุขู" },
                right: { title: "ุฃุฑุณู ููุง ุจุฑูุฏุงู ุฅููุชุฑูููุงู" },
                thank: { title: "ุฃุญุณูุช!", text: "ุณูุชูุงุตู ูุนู ุฎูุงู ุงูุณุงุนุงุช ุงููุงุฏูุฉ ุฃู ููููู ุญุฌุฒ ููุนุฏ ุงูุขู." }
            },
            
            // Footer
            footer: { 
                social: "ุฑูุงุจุท ุงูุชูุงุตู ุงูุงุฌุชูุงุนู", 
                certifications: "ุงูุดูุงุฏุงุช", 
                officesTitle: "ููุงุชุจูุง" 
            },
            
            // Offices
            offices: {
                cupertino: "ููุจุฑุชูููุ ุงูููุงูุงุช ุงููุชุญุฏุฉ",
                jeddah: "ุฌุฏุฉุ ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ",
                riyadh: "ุงูุฑูุงุถุ ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ",
                bangaluru: "ุจูุบุงููุฑูุ ุงูููุฏ",
                capetown: "ููุจ ุชุงููุ ุฌููุจ ุฃูุฑูููุง"
            }
        },
        
        en: {
            // English translations (fallback)
            header: { about: "About us", services: "Services", company: "Company" },
            dropdown: {
                services: {
                    aiConsulting: "AI Powered Consulting",
                    engineering: "Engineering Services",
                    dataAnalytics: "Data Analytics",
                    corporateTraining: "Corporate Training"
                },
                company: {
                    profile: "Marln Company Profile",
                    csr: "Corporate Social Responsibility (CSR)",
                    partners: "Technology Partners",
                    industry: "Industry"
                }
            },
            common: {
                contactUs: "Contact us",
                scheduleMeeting: "Schedule a meeting",
                speakToTeam: "Speak to Our Team",
                sendMessage: "send message",
                namePlaceholder: "Name*",
                emailPlaceholder: "E-mail*",
                messagePlaceholder: "Tell about your project"
            },
            industry: {
                title: "Industry Solutions",
                exploreSolutions: "Explore Solutions"
            },
            contact: {
                form: { title: "Kick Start Your Project Right Now" },
                right: { title: "Send us an email" }
            },
            footer: { social: "Social Links", certifications: "Certifications", officesTitle: "Offices" },
            offices: {
                cupertino: "Cupertino, USA",
                jeddah: "Jeddah, Saudi Arabia",
                riyadh: "Riyadh, Saudi Arabia",
                bangaluru: "Bengaluru, India",
                capetown: "Capetown, South Africa"
            }
        }
    };
    
    // Universal translation loading function
    async function loadTranslations(lang) {
        console.log('๐ Loading translations for language:', lang);
        
        // PRIORITY 1: Use embedded translations (always works)
        if (EMBEDDED[lang]) {
            console.log('๐ Using embedded translations for:', lang);
            return EMBEDDED[lang];
        }
        
        // PRIORITY 2: Check cache
        if (CACHE[lang]) {
            console.log('๐ Using cached translations for:', lang);
            return CACHE[lang];
        }
        
        // PRIORITY 3: Try to load from JSON (fallback only)
        try {
            console.log('๐ Attempting to load from JSON file for:', lang);
            const res = await fetch(`i18n/${lang}.json`, { 
                cache: 'no-cache',
                headers: { 'Accept': 'application/json' }
            });
            
            if (res.ok) {
                const json = await res.json();
                CACHE[lang] = json;
                console.log('๐ Successfully loaded JSON translations for:', lang);
                return json;
            }
        } catch (err) {
            logError(`Failed to load JSON translations for ${lang}`, err);
        }
        
        // FINAL FALLBACK: Use embedded translations
        if (EMBEDDED[lang]) {
            console.log(`๐ Using embedded translations as final fallback for ${lang}`);
            return EMBEDDED[lang];
        }
        
        // LAST RESORT: Default language
        if (lang !== DEFAULT_LANG) {
            console.log(`๐ Falling back to default language: ${DEFAULT_LANG}`);
            return loadTranslations(DEFAULT_LANG);
        }
        
        console.log('๐ No translations available, returning empty object');
        return {};
    }
    
    // Set direction and language
    function setDirAndLang(lang) {
        const html = document.documentElement;
        html.lang = lang;
        const isRtl = SUPPORTED_RTL.has(lang);
        html.dir = isRtl ? 'rtl' : 'ltr';
        html.classList.toggle('rtl', isRtl);
        ensureRtlCss(isRtl);
        console.log(`๐ Set language to: ${lang}, RTL: ${isRtl}`);
    }
    
    // Ensure RTL CSS is loaded
    function ensureRtlCss(isRtl) {
        let link = document.getElementById('rtl-css');
        if (isRtl) {
            if (!link) {
                link = document.createElement('link');
                link.id = 'rtl-css';
                link.rel = 'stylesheet';
                link.href = 'css/rtl.css';
                link.onerror = () => logError('Failed to load RTL CSS');
                document.head.appendChild(link);
                console.log('๐ RTL CSS loaded');
            }
        } else if (link) {
            link.remove();
            console.log('๐ RTL CSS removed');
        }
    }
    
    // Update language toggle button
    function setButtonLabelFromLang(lang) {
        const btn = document.querySelector('.menu-item-lang .lang-toggle-button');
        if (btn) { 
            btn.textContent = lang === 'en' ? 'EN' : 'AR';
            btn.setAttribute('data-lang', lang);
            console.log(`๐ Updated language button to: ${lang}`);
        }
    }
    
    // Get translation value
    function tGet(translations, key) {
        return key.split('.').reduce((acc, part) => 
            (acc && acc[part] != null ? acc[part] : undefined), translations);
    }
    
    // Apply text to DOM elements
    function applyText(selector, translations, key) {
        const val = tGet(translations, key);
        if (typeof val === 'string') {
            const elements = document.querySelectorAll(selector);
            elements.forEach(el => {
                if (el) el.textContent = val;
            });
        }
    }
    
    // Apply attribute to DOM elements
    function applyAttr(selector, attr, translations, key) {
        const val = tGet(translations, key);
        if (typeof val === 'string') {
            const elements = document.querySelectorAll(selector);
            elements.forEach(el => {
                if (el) el.setAttribute(attr, val);
            });
        }
    }
    
    // Apply industry page translations
    function applyIndustryTranslations(translations) {
        console.log('๐ Applying industry page translations');
        
        // Industry title
        applyText('.industry-title span', translations, 'industry.title');
        
        // Industry cards
        const industryCards = document.querySelectorAll('.industry-card');
        industryCards.forEach((card, index) => {
            const title = card.querySelector('h3');
            const desc = card.querySelector('p');
            const button = card.querySelector('.contact-scroll-btn');
            
            if (title && index < 12) {
                const industryKeys = [
                    'automotive', 'banking', 'consumerGoods', 'communications',
                    'healthcare', 'hiTech', 'lifeSciences', 'publicService',
                    'retail', 'travel', 'government', 'utilities'
                ];
                
                if (industryKeys[index]) {
                    applyText(title, translations, `industry.${industryKeys[index]}.title`);
                    applyText(desc, translations, `industry.${industryKeys[index]}.desc`);
                }
            }
            
            if (button) {
                applyText(button, translations, 'industry.exploreSolutions');
            }
        });
    }
    
    // Apply header translations
    function applyHeaderTranslations(translations) {
        console.log('๐ Applying header translations');
        
        // Header links
        applyText('#header_menu .menu-item-680 a', translations, 'header.about');
        applyText('#header_menu .menu-item-666 > a', translations, 'header.services');
        applyText('#header_menu .menu-item-company > a', translations, 'header.company');
        
        // Dropdown menus
        const servicesDropdown = document.querySelector('.services-dropdown');
        if (servicesDropdown) {
            const servicesItems = servicesDropdown.querySelectorAll('a');
            const serviceKeys = ['aiConsulting', 'engineering', 'dataAnalytics', 'corporateTraining'];
            servicesItems.forEach((item, index) => {
                if (serviceKeys[index]) {
                    applyText(item, translations, `dropdown.services.${serviceKeys[index]}`);
                }
            });
        }
        
        const companyDropdown = document.querySelector('.company-dropdown');
        if (companyDropdown) {
            const companyItems = companyDropdown.querySelectorAll('a');
            const companyKeys = ['profile', 'csr', 'partners', 'industry'];
            companyItems.forEach((item, index) => {
                if (companyKeys[index]) {
                    applyText(item, translations, `dropdown.company.${companyKeys[index]}`);
                }
            });
        }
    }
    
    // Apply contact form translations
    function applyContactTranslations(translations) {
        console.log('๐ Applying contact form translations');
        
        applyText('.contact-us--form--title', translations, 'contact.form.title');
        applyAttr('input[name="your-name"]', 'placeholder', translations, 'common.namePlaceholder');
        applyAttr('input[name="your-email"]', 'placeholder', translations, 'common.emailPlaceholder');
        applyAttr('textarea[name="your-message"]', 'placeholder', translations, 'common.messagePlaceholder');
        applyAttr('input[type="submit"][value]', 'value', translations, 'common.sendMessage');
        
        applyText('.contact-us--connect .heading', translations, 'contact.right.title');
    }
    
    // Apply footer translations
    function applyFooterTranslations(translations) {
        console.log('๐ Applying footer translations');
        
        applyText('#footer_menu_4 > li > a', translations, 'footer.social');
        applyText('#footer_menu_5 > li > a', translations, 'footer.certifications');
        applyText('.offices .offices-title', translations, 'footer.officesTitle');
        
        // Office locations
        const officeElements = document.querySelectorAll('.offices-list li .offices-item p');
        if (officeElements.length >= 5) {
            applyText(officeElements[0], translations, 'offices.cupertino');
            applyText(officeElements[1], translations, 'offices.jeddah');
            applyText(officeElements[2], translations, 'offices.riyadh');
            applyText(officeElements[3], translations, 'offices.bangaluru');
            applyText(officeElements[4], translations, 'offices.capetown');
        }
    }
    
    // Main language switching function
    async function setLanguage(lang) {
        try {
            console.log(`๐ Switching to language: ${lang}`);
            
            // Set direction and language
            setDirAndLang(lang);
            
            // Load translations
            const translations = await loadTranslations(lang);
            
            if (!translations || Object.keys(translations).length === 0) {
                throw new Error('No translations available');
            }
            
            console.log('๐ Translations loaded successfully:', Object.keys(translations));
            
            // Apply translations based on page type
            if (document.querySelector('main.industry-content')) {
                applyIndustryTranslations(translations);
            }
            
            // Always apply header, contact, and footer translations
            applyHeaderTranslations(translations);
            applyContactTranslations(translations);
            applyFooterTranslations(translations);
            
            // Update button label
            setButtonLabelFromLang(lang);
            
            // Save language preference
            try {
                localStorage.setItem('site-lang', lang);
                console.log('๐ Language preference saved');
            } catch (error) {
                logError('Failed to save language preference', error);
            }
            
            console.log(`๐ Language switch completed successfully for: ${lang}`);
            
        } catch (error) {
            logError('setLanguage failed', error);
            console.log('๐ Falling back to default language');
            setLanguage(DEFAULT_LANG);
        }
    }
    
    // Initialize language toggle button
    function initToggleButton() {
        const toggleBtn = document.querySelector('.menu-item-lang .lang-toggle-button');
        if (toggleBtn) {
            toggleBtn.addEventListener('click', function(e) {
                e.preventDefault();
                const currentLang = this.getAttribute('data-lang') || 'en';
                const newLang = currentLang === 'en' ? 'ar' : 'en';
                console.log(`๐ Language toggle clicked: ${currentLang} -> ${newLang}`);
                setLanguage(newLang);
            });
            console.log('๐ Language toggle button initialized');
        } else {
            console.log('๐ Language toggle button not found');
        }
    }
    
    // Get saved language
    function getSavedLang() {
        try {
            return localStorage.getItem('site-lang') || DEFAULT_LANG;
        } catch (error) {
            logError('Failed to get saved language', error);
            return DEFAULT_LANG;
        }
    }
    
    // Initialize on DOM ready
    document.addEventListener('DOMContentLoaded', function() {
        console.log('๐ DOM ready, initializing language system');
        initToggleButton();
        const lang = getSavedLang();
        setLanguage(lang);
    });
    
    // Also initialize on window load
    window.addEventListener('load', function() {
        console.log('๐ Window loaded, ensuring language system is ready');
        const lang = getSavedLang();
        if (lang !== 'en') {
            setLanguage(lang);
        }
    });
    
    // Export functions for manual use
    window.setLanguage = setLanguage;
    window.getSavedLang = getSavedLang;
    
    console.log('๐ Universal Arabic Language System: Ready!');
})();
